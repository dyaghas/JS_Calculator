__JAVASCRIPT______________________________________________________________

-can be put between <script></script> tags in a html;

-its recommended to end every line with a semicolon;

-you can execute a javascript code without attaching it to a html code
 using node.js.

__LOGIC OPERATORS_________________________________________________________

+ (sum)
- (subtraction)
/ (division)
* (multiplication)
% (division remainder)
^ ou pow(num_1, num_2) (potentiation)
var++ (same as var + 1)
= (equals)
== (compares two values)
=== (strict equality) <- returns false if the variables are of different
> (greater than)		 types.
< (smaller than)
>= (greater or equals)
<= (smaller or equals)
!= (different)
!== (strict inequality) <- returns true if the variables are of different
&& (and)				   types.
|| (or)
! (no)

-you can use + - / * with a equals operator simultaneously. Ex:

var num = 3;
var num += 6; <- using equals and sum simultaneously.

__DATA AND VARIABLES______________________________________________________

-Data are frequently set into a variable;

-variables are declared and assigned in a similar way to Java;

-console.log() <- displays what is inside the brackets in the console
		  (notepad++ does not support this).

-variables and functions name are case sensitive;

__Data Types__

-undefined: when the data has no data type defined;

-null: nothing;

-boolean: true or false;

-string: text;

-symbol: 

-number: ...

-object: can store key values pairs;



__Examples__

Ways of defining a variable:

var name = "Gustavo" <- the var name is defined as a string.

name = "Felipe" <- the variable name is changed.

let name = "Pedro" <- this variable can only be used within its scope.

const pi = 3.14 <- this variable can't be changed, it is a constant.

__COMMANDS________________________________________________________________

.length <- outputs the length of a string. Ex:

var name = "Pedro";
var namelength = name.length;

-you can refer to the index of a string letter using stringVar[num]. Ex:

var string = "abc";
var firstLetter = string[0];

var lastLetter = string[string.length - 1] <- you can use this to refer
											  to the last letter.

__ARRAYS__________________________________________________________________

var varName = ["Felipe", 25, 40, 30.23] <- creates an array.

var varName = [["hello", 23, "hi"], ["potato", "physics"]]
										^
										|- creates a nested array

varName.push() <- adds another element to the end of the array.

varName.unshift() <- adds another element to the beginning of the array.

var removedIndex = varName.pop() <- removes the last element of the array 
									and stores it in the removedIndex var.

var removedIndex = varName.shift() <- removes the first element of the 
									  array and stores it in the
									  removedIndex var.

JSON.stringify() <- changes an array to a string;

__JAVASCRIPT OBJECTS______________________________________________________

var obVar = {			<- creates an object.
	"name": "Pedro",
	"age": 25,
	"cash": 264,
	"friends": ["Gustavo", "Felipe", "Laura"]
}

var name = obVar.name <- access the obVar "name" property through a dot
						 notation.

var name = obVar["name"] <- access the obVar "name" property through a
							bracket notation. It is the only way to
							access a property with spaces like "na me".

var obVar.name = "João" <- changes the respective property through a
						   dot notation. This can be used to create
						   new properties too.

obVar["weight"] = 60 <- creates a new property through a bracket notation.

delete obVar.name <- deletes the "name" obVar property.

var obVar2 = {
	1: "blabla",
	2: "blou"     <--------¬
}						   |
						   |
var num = 2;               |
var text = obVar2[num];  <--- access the "2" variable through a bracket
							notation.

var obVar = {
                "name": "Pedro",
                "age": 25,
                "cash": 264,
                "friends": ["Gustavo", "Laura"]
            };

            function check(a) {
                if (obVar.hasOwnProperty(a)) { <- the hasOwnProperty
                    return obVar[a];		      function checks if the
                } else {						  object has the specified
                    return "Not found";			  property (a).
                }
            }

            console.log(check("name"));

__NESTED OBJECTS__

var person = {
                'name': 'Gustavo',
                'physical_traits': {
                    'age': 17,
                    'height': 1.6,
                    'weight': 62
                },
                'status': {
                    'mood': 'happy',
                    'money': 150
                }
            }
					^- example of a nested object.

var weight = person.physical_traits.weight <- access the element weight.

__NESTED ARRAYS__

var person = var plants = [
                {
                    type: 'flowers',
                    list: [
                        'rose',
                        'tulip',
                        'dandelion'
                    ]
                },
                {
                    type: 'trees',
                    list: [
                        'maple',
                        'pine',
                        'birch'
                    ]
                }
            ];
					^- example of a nested array.





